# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Declare the orbs that we'll use in our config.
# read more about orbs: https://circleci.com/docs/2.0/orb-intro/
orbs:
  ruby: circleci/ruby@1.4.0
  node: circleci/node@5.0.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build: # our first job, named "build"
    docker:
      - image: cimg/ruby:3.1-node # use a tailored CircleCI docker image.
    steps:
      - checkout # pull down our git code.
      - ruby/install-deps # use the ruby orb to install dependencies
      # use the node orb to install our packages
      # specifying that we use `yarn` and to cache dependencies with `yarn.lock`
      # learn more: https://circleci.com/docs/2.0/caching/
      # - node/install-packages:
      #     pkg-manager: yarn
      #     # cache-key: "yarn.lock"
  test:  # our next job, called "test"
    # we run "parallel job containers" to enable speeding up our tests;
    # this splits our tests across multiple containers.
    parallelism: 3
    # here we set TWO docker images.
    docker:
      - image: cimg/ruby:3.1-node # this is our primary docker image, where step commands run.
      # - image: circleci/postgres:14.1.0
        environment: # add POSTGRES environment variables.
          # POSTGRES_USER: circleci-demo-ruby
          # POSTGRES_DB: rails_blog_test
          # POSTGRES_PASSWORD: ""
    # environment variables specific to Ruby/Rails, applied to the primary container.
    environment:
      BUNDLE_JOBS: "3"
      BUNDLE_RETRY: "3"
      # PGHOST: 127.0.0.1
      # PGUSER: circleci-demo-ruby
      # PGPASSWORD: ""
      RAILS_ENV: test
    # A series of steps to run, some are similar to those in "build".
    steps:
      - checkout
      - ruby/install-deps
      # - node/install-packages:
      #     pkg-manager: yarn
      #     cache-path: ~/project/node_modules
      # Here we make sure that the secondary container boots
      # up before we run operations on the database.
      # - run:
      #     name: Wait for DB
      #     command: dockerize -wait tcp://localhost:5432 -timeout 1m
      # - run:
      #     name: Database setup
      #     command: bundle exec rails db:schema:load --trace
      # Run rspec in parallel
      - run:
          name: rails test
          command: |
            ./bin/rails test

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  vidly-workflow:
    jobs:
      - build
      - test
